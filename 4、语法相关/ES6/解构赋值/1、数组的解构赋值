一、数组的解构赋值
let arr = [0,1,2]
let [a,b,c] = arr
console.log(a) // 0
console.log(b) // 1
console.log(c) // 2

但是很多时候，数据并非一一对应的
(1)可忽略
let [a, , b] = [1, 2, 3];
// a = 1
// b = 3
(2)得到一个默认值
let arr = [,1,2]
let [a='我是默认值',b,c] = arr
console.log(a) // '我是默认值'
console.log(b) // 1
console.log(c) // 2

从这个例子可以看出，在解构赋值的过程中，a=undefined时，会使用默认值。当a=null时，那么a就会使用null
let arr = [null,1,2]
let [a='我是默认值',b,c] = arr
console.log(a) // null
console.log(b) // 1
console.log(c) // 2

例如：
   当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。
   let [a = 3, b = a] = [];     // a = 3, b = 3
   let [a = 3, b = a] = [1];    // a = 1, b = 1
   let [a = 3, b = a] = [1, 2]; // a = 1, b = 2
       (1) a 与 b 匹配结果为 undefined ，触发默认值：a = 3; b = a = 3 
       (2) a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：b = a = 1 
       (3) a 与 b 正常解构赋值，匹配结果：a = 1，b = 2
   
不完全解构
let [a = 1, b] = []; // a = 1, b = undefined

扩展运算符
let [a, ...b] = [1, 2, 3];
//a = 1
//b = [2, 3]

字符串等
在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值。可遍历对象即实现 Iterator 接口的数据。
let [a, b, c, d, e] = 'hello';
// a = 'h'
// b = 'e'
// c = 'l'
// d = 'l'
// e = 'o'

// 数组的克隆
// 假如我们简单地把一个数组赋值给另外一个变量
let a = [0,1,2,3]
let b = a
b.push(4)
console.log(a) // [0,1,2,3,4]
console.log(b) // [0,1,2,3,4]

因为这只是简单的把引用地址赋值给b，而不是重新开辟一个内存地址，所以
a和b共享了同一个内存地址，该内存地址的更改，会影响到所有引用该地址的变量
那么用下面的方法，把数组进行克隆一份，互不影响
let a = [0,1,2,3]
let b = [...a]
b.push(4)
console.log(a) // [0,1,2,3]
console.log(b) // [0,1,2,3,4]