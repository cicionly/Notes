filter
1、语法
    arr.filter(callback)
    filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。
    filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。
    filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。
      回调函数还可以接收另外两个参数，表示元素的位置和数组本身：
        (1) element （数组中当前被处理的元素）
        (2) index （当前元素在数组中的索引）
        (3) array （调用 reduce 的数组）
        
2、实例解析
    例1. 在一个Array中，删掉偶数，只保留奇数，可以这么写：
        var arr = [1, 2, 4, 5, 6, 9, 10, 15];
        var r = arr.filter(function (x) {
            return x % 2 !== 0;
        });
        r; // [1, 5, 9, 15]
   
    例2. 把一个Array中的空字符串删掉，可以这么写：
        var arr = ['A', '', 'B', null, undefined, 'C', '  '];
        var r = arr.filter(function (s) {
            return s && s.trim(); // 注意：IE9以下的版本没有trim()方法
        });
        r; // ['A', 'B', 'C']

    例3. 可见用filter()这个高阶函数，关键在于正确实现一个“筛选”函数。
        var arr = ['A', 'B', 'C'];
        var r = arr.filter(function (element, index, self) {
            console.log(element); // 依次打印'A', 'B', 'C'
            console.log(index); // 依次打印0, 1, 2
            console.log(self); // self就是变量arr
            return true; 
        });

    例4. 利用filter，可以巧妙地去除Array的重复元素：
        var r,
        arr = ['apple', 'strawberry', 'banana', 'pear', 'apple', 'orange', 'orange', 'strawberry'];
        r = arr.filter(function (element, index, self) {
            return self.indexOf(element) === index;    //indexOf只返回第一个匹配的
        });
        console.log(r.toString());